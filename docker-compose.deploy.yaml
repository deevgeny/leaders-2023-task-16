version: "3.8"

services:
  database:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB_FILE: /run/secrets/db_name
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_name
      - db_user
      - db_password
    networks:
      - my_network

  adminer:
    image: adminer
    restart: always
    depends_on:
      - database
    networks:
      - my_network

  backend:
    # image: deevgeny/task-16-backend:latest
    build:
      context: ./backend
    restart: always
    volumes:
      - media:/app/media/
    environment:
      DB_ENGINE: $DB_ENGINE
      DB_HOST: $DB_HOST
      DB_PORT: $DB_PORT
      DEBUG: 0
      ALLOWED_HOSTS: $ALLOWED_HOSTS
      CSRF_TRUSTED_ORIGINS: $CSRF_TRUSTED_ORIGINS
      CORS_ALLOWED_ORIGINS: $CORS_ALLOWED_ORIGINS
    secrets:
      - db_name
      - db_user
      - db_password
      - secret_key
    networks:
      - my_network
    depends_on:
      - database

  frontend:
    build:
      context: ./frontend2
      args:
        SERVER_PORT: 3000
        API_PREFIX: /api/v1
    networks:
      - my_network
    depends_on:
      - backend

  nginx:
    image: nginx:1.21.3-alpine
    networks:
      - my_network
      - web
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static:/app/static/
      - media:/app/media/
    restart: always

volumes:
  postgres_data:
  static:
  media:

secrets:
  db_name:
    environment: POSTGRES_DB
  db_user:
    environment: POSTGRES_USER
  db_password:
    environment: POSTGRES_PASSWORD
  secret_key:
    environment: SECRET_KEY

networks:
  web:
    internal: false
  my_network:
    internal: true
