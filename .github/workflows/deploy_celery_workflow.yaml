name: Deploy with celery and redis

on:
  push:
    branches:
      - feature/email-notifications

jobs:
  build_backend:
    environment: DEPLOY 
    name: Build and push backend image
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Login to Dockerhub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: ./backend/
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/task-16-backend:celery
  
  build_frontend:
    environment: DEPLOY 
    name: Build and push frontend image
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Login to Dockerhub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: ./frontend2/
        file: ./frontend2/Dockerfile
        build-args: |
          SERVER_PORT=${{ secrets.FRONTEND_SERVER_PORT }}
          API_PREFIX=${{ secrets.FRONTEND_API_PREFIX }}
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/task-16-frontend:deploy
  
  deploy:
    name: Deploy
    environment: DEPLOY 
    runs-on: ubuntu-latest
    needs: [build_backend, build_frontend]
    steps:
      
      - name: SSH and deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          script: |
            docker compose stop
            docker compose rm -f backend
            docker compose rm -f celery
            docker compose rm -f frontend
            docker image prune -fa
            echo '# Database settings' > .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo '# Backend settings' >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}" >> .env
            echo CSRF_TRUSTED_ORIGINS="${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
            echo BACKEND_PORT=${{ secrets.BACKEND_PORT }} >> .env
            echo CORS_ALLOWED_ORIGINS="${{ secrets.CORS_ALLOWED_ORIGINS }}" >> .env
            echo '# Celery settings' >> .env
            echo CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }} >> .env
            echo '# Email settings' >> .env
            echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env
            echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env
            echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .env
            echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env
            echo EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }} >> .env
            echo EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }} >> .env
            echo EMAIL_SSL_KEYFILE=${{ secrets.EMAIL_SSL_KEYFILE }} >> .env
            echo EMAIL_SSL_CERTFILE=${{ secrets.EMAIL_SSL_CERTFILE }} >> .env
            source .env
            docker compose down
            docker compose up -d
